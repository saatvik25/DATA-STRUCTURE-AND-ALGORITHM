class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int start =0;
        int sum =0;
        int mini = INT_MAX;
        for(int end =0;end<nums.size();end++){
            sum += nums[end];
            while(sum>=target){
                mini = min(mini,end-start+1);
                sum -= nums[start];
                start++;

            }

        }
        if(mini == INT_MAX){
            return 0;
        }
        return mini;
    }
};

### Dry Run for Example 1:
**Input**: `target = 7`, `nums = [2, 3, 1, 2, 4, 3]`

- Initially, `start = 0`, `end = 0`, `sum = 0`, and `minLength = INT_MAX`.

1. Add `nums[0] = 2` to `sum`. Now, `sum = 2`, `end = 0`.
2. Add `nums[1] = 3` to `sum`. Now, `sum = 5`, `end = 1`.
3. Add `nums[2] = 1` to `sum`. Now, `sum = 6`, `end = 2`.
4. Add `nums[3] = 2` to `sum`. Now, `sum = 8`, `end = 3`. Sum is greater than target.
   - Update `minLength = 4` (`end - start + 1`).
   - Subtract `nums[0] = 2` from `sum`. Now, `sum = 6`, `start = 1`.
5. Add `nums[4] = 4` to `sum`. Now, `sum = 10`, `end = 4`. Sum is greater than target.
   - Update `minLength = 3` (`end - start + 1`).
   - Subtract `nums[1] = 3` from `sum`. Now, `sum = 7`, `start = 2`.
   - Update `minLength = 2` (`end - start + 1`).
   - Subtract `nums[2] = 1` from `sum`. Now, `sum = 6`, `start = 3`.
   
Finally, the smallest subarray with a sum >= `7` is `[4, 3]` with a length of `2`. Therefore, the output is `2`.
